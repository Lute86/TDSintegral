doctype html
html
  head
    title Dashboard | Empleados
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css")
    style.
      body {
        background-color: #f8f9fa;
        padding: 2rem;
      }
      .employee-card {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
      }
      .form-section {
        background: #ffffff;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }

  body
    .container
      h1.mb-4.text-primary Dashboard de empleados

      // ðŸ”¹ Formulario de creaciÃ³n arriba
      h2.mb-3.text-success Agregar nuevo empleado
      .form-section
        .mb-3
          label.form-label(for="newName") Nombre completo
          input.form-control(type="text" id="newName" placeholder="Ej. LucÃ­a GÃ³mez" required)
        .mb-3
          label.form-label(for="newEmail") Email
          input.form-control(type="email" id="newEmail" placeholder="ejemplo@mail.com" required)
        button.btn.btn-success(onclick="createEmployee()") Crear empleado

      hr

      // ðŸ”¹ Listado de empleados debajo
      h2.mt-4.mb-3.text-primary Lista de empleados
      if employees.length
        .row#employeeCards
          each employee in employees
            .col-md-6.mb-3(data-id=employee._id)
              .employee-card
                h5.mb-1 
                  input.form-control.form-control-sm.edit-name(type="text" value=employee.nombre)
                small.text-muted Email:
                input.form-control.form-control-sm.edit-email(type="email" value=employee.email)
                .mt-3
                  button.btn.btn-sm.btn-warning.me-2(onclick="updateEmployee(this)") Actualizar
                  button.btn.btn-sm.btn-danger(onclick="deleteEmployee(this)") Eliminar
      else
        p.text-muted No hay empleados registrados.

    script.
      async function createEmployee() {
        const nombre = document.getElementById("newName").value;
        const email = document.getElementById("newEmail").value;

        const res = await fetch("/employee/profiles", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ nombre, email })
        });

        if (res.ok) {
          location.reload();
        } else {
          alert("Error al crear empleado");
        }
      }

      async function updateEmployee(btn) {
        const card = btn.closest(".col-md-6");
        const id = card.dataset.id;
        const nombre = card.querySelector(".edit-name").value;
        const email = card.querySelector(".edit-email").value;

        const res = await fetch(`/employee/myprofile/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ nombre, email })
        });

        if (res.ok) {
          alert("Empleado actualizado");
        } else {
          alert("Error al actualizar");
        }
      }

      async function deleteEmployee(btn) {
        const card = btn.closest(".col-md-6");
        const id = card.dataset.id;

        if (!confirm("Â¿Seguro que querÃ©s eliminar este empleado?")) return;

        const res = await fetch(`/employee/employee/${id}`, { method: "DELETE" });

        if (res.ok) {
          card.remove();
        } else {
          alert("Error al eliminar");
        }
      }
